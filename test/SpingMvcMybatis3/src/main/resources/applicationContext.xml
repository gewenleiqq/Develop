<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
 	xmlns:mvc="http://www.springframework.org/schema/mvc"    
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/jee 
		http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/mvc    
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
	<!--本示例采用DBCP连接池，应预先把DBCP的jar包复制到工程的lib目录下。	连接池配置如下-->
	<context:property-placeholder	location="classpath:dataSource.properties" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"    
        destroy-method="close">    
        <property name="driverClassName" value="${driver}" />    
        <property name="url" value="${url}" />    
        <property name="username" value="${username}" />    
        <property name="password" value="${password}" />   
    </bean>  
	<bean id="sqlSessionFactory" name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--dataSource属性指定要用到的连接池-->
		<property name="dataSource" ref="dataSource"/>
		<!--configLocation属性指定mybatis的核心配置文件-->
		<property name="configLocation" value="classpath:config/mybatisConfig.xml"/>
	</bean>
	
  	<!-- 扫描com这个包里的所有类，把里面配上相应注解的类全都放在容器中进行管理 -->    
    <context:component-scan base-package="org.ssi"/>    
    <!-- 添加注解驱动 -->    
    <mvc:annotation-driven />  
    <!-- 定义跳转的文件的前后缀 -->    
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">    
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个    
              可用的url地址 -->    
        <property name="prefix" value="/WEB-INF/views/" />    
        <property name="suffix" value=".jsp" />    
    </bean>    
      
    <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">    
        <property name="basePackage" value="org.ssi.api.dao"/>    
    </bean>  
      
    
	 <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx   -->
    <bean id="transactionManager"    
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">    
        <property name="dataSource" ref="dataSource" />
        <qualifier value="isMysql"></qualifier>
       	<!-- 数据回滚，这里提供@Transactional value的值 回滚该数据源的事物 -->
    </bean>    
    
    <!-- 全注解方式   需加上@Transactional -->  
    <tx:annotation-driven transaction-manager="transactionManager" />  
      
    <!-- 事务控制的业务方法配 -->  
    <tx:advice id="txAdvice" transaction-manager="transactionManager" >  
        <tx:attributes>  
            <tx:method name="get*"  read-only="true" />  
            <tx:method name="page*" read-only="true" />  
            <tx:method name="list*" read-only="true" />  
            <tx:method name="find*" read-only="true"  />  
            <tx:method name="search*" read-only="true"  />
            <tx:method name="*" propagation="REQUIRED"  />  
        </tx:attributes>  
    </tx:advice>  
    <!-- 事务控制拦截 -->  
    <aop:config proxy-target-class="true" >  
        <aop:advisor pointcut="execution(* org1.ssi..service..*.*(..))"  
            advice-ref="txAdvice"/>  
    </aop:config>  
</beans>